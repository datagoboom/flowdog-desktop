===========================================
<handlers/databaseHandlers.js>
===========================================
import { Client } from 'pg'
import mysql from 'mysql2/promise'
import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import database from '../services/database'

export const databaseHandlers = {
  'storage.test-connection': async (event, config) => {
    try {
      // Log the raw input
      console.log('Testing connection with config:', {
        ...config,
        password: config?.password ? '[REDACTED]' : undefined
      });

      if (!config?.type) {
        throw new Error(`Database type is required. Received: ${JSON.stringify(config)}`);
      }

      switch (config.type) {
        case 'sqlite': {
          if (!config.file) {
            throw new Error('SQLite database file path is required');
          }

          console.log('Testing SQLite connection:', config.file);
          const db = await open({
            filename: config.file,
            driver: sqlite3.Database
          });
          
          await db.get('SELECT 1');
          await db.close();
          console.log('SQLite connection test successful');
          return { success: true };
        }

        case 'postgres': {
          const client = new Client({
            host: config.host,
            port: parseInt(config.port),
            database: config.database,
            user: config.username,
            password: config.password,
            ssl: config.ssl
          });
          
          await client.connect();
          await client.query('SELECT 1');
          await client.end();
          return { success: true };
        }

        case 'mysql': {
          const connection = await mysql.createConnection({
            host: config.host,
            port: parseInt(config.port),
            database: config.database,
            user: config.username,
            password: config.password,
            ssl: config.ssl
          });
          
          await connection.execute('SELECT 1');
          await connection.end();
          return { success: true };
        }

        default:
          throw new Error(`Unsupported database type: ${config.type}`);
      }
    } catch (error) {
      console.error('Connection test failed:', error);
      return { 
        success: false, 
        error: error.message 
      };
    }
  },

  'storage.save-connection': async (connectionData) => {
    try {
      console.log('Saving connection data:', {
        ...connectionData,
        password: connectionData.password ? '[REDACTED]' : undefined
      })

      await database.saveConnection(connectionData)
      console.log('Connection saved successfully with ID:', connectionData.id)
      
      return { success: true }
    } catch (error) {
      console.error('Failed to save connection:', error)
      return { 
        success: false, 
        error: error.message 
      }
    }
  },

  'storage.list-connections': async () => {
    try {
      const connections = await database.listConnections()
      return { 
        success: true, 
        data: connections 
      }
    } catch (error) {
      return { 
        success: false, 
        error: error.message 
      }
    }
  },

  'storage.delete-connection': async (connectionId) => {
    try {
      await database.deleteConnection(connectionId)
      return { success: true }
    } catch (error) {
      return { 
        success: false, 
        error: error.message 
      }
    }
  },

  'dialog.open-file': async (options) => {
    const { dialog } = require('electron')
    try {
      const result = await dialog.showOpenDialog({
        properties: ['openFile'],
        ...options
      })
      
      return { 
        success: !result.canceled, 
        filePath: result.filePaths[0] 
      }
    } catch (error) {
      return { 
        success: false, 
        error: error.message 
      }
    }
  },

  'nodes.database.query': async ({ connectionId, query, parameters = [] }) => {
    try {
      // Get connection details from database
      const connections = await database.db.all(
        'SELECT * FROM connections WHERE id = ?',
        [connectionId]
      );

      if (connections.length === 0) {
        throw new Error(`Connection ${connectionId} not found`);
      }

      const connection = connections[0];
      const config = JSON.parse(connection.config);

      console.log('Executing query with connection:', {
        type: connection.type,
        query,
        parameters,
        config: { ...config, password: '[REDACTED]' }
      });

      switch (connection.type) {
        case 'postgres': {
          const client = new Client({
            host: config.host,
            port: parseInt(config.port),
            database: config.database,
            user: config.username,
            password: config.password,
            ssl: config.ssl
          });

          await client.connect();
          const result = await client.query(query, parameters);
          await client.end();

          return {
            success: true,
            data: {
              rowCount: result.rowCount,
              rows: result.rows,
              fields: result.fields.map(f => ({
                name: f.name,
                type: f.dataTypeID
              }))
            }
          };
        }

        case 'mysql': {
          const connection = await mysql.createConnection({
            host: config.host,
            port: parseInt(config.port),
            database: config.database,
            user: config.username,
            password: config.password,
            ssl: config.ssl
          });

          const [rows, fields] = await connection.execute(query, parameters);
          await connection.end();

          return {
            success: true,
            data: {
              rowCount: rows.length,
              rows,
              fields: fields.map(f => ({
                name: f.name,
                type: f.type
              }))
            }
          };
        }

        case 'sqlite': {
          const db = await open({
            filename: config.file,
            driver: sqlite3.Database
          });

          const result = await db.all(query, parameters);
          await db.close();

          return {
            success: true,
            data: {
              rowCount: result.length,
              rows: result,
              fields: [] // SQLite doesn't provide field metadata easily
            }
          };
        }

        default:
          throw new Error(`Unsupported database type: ${connection.type}`);
      }
    } catch (error) {
      console.error('Database query failed:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
} 
===========================================
<handlers/dialogHandlers.js>
===========================================
import { dialog } from 'electron';
import { writeFile } from 'fs/promises';

export const dialogHandlers = {
  'dialog.open-file': async (event, options) => {
    try {
      const result = await dialog.showOpenDialog(options);
      return {
        success: !result.canceled,
        filePath: result.filePaths[0]
      };
    } catch (error) {
      console.error('Failed to open file dialog:', error);
      return { success: false, error: error.message };
    }
  },

  'dialog.save-file': async (event, options) => {
    try {
      const result = await dialog.showSaveDialog(options);
      
      if (result.canceled) {
        return { success: false };
      }

      // Create empty SQLite database file
      if (result.filePath.endsWith('.db') || 
          result.filePath.endsWith('.sqlite') || 
          result.filePath.endsWith('.sqlite3')) {
        await writeFile(result.filePath, ''); // Creates empty file
      }

      return {
        success: true,
        filePath: result.filePath
      };
    } catch (error) {
      console.error('Failed to save file:', error);
      return { success: false, error: error.message };
    }
  }
}; 
===========================================
<handlers/nodeHandlers.js>
===========================================
import { exec } from 'child_process'
import { promisify } from 'util'
import { readFile, writeFile } from 'fs/promises'

const execAsync = promisify(exec)

export const nodeHandlers = {
  'nodes.command.execute': async (command, options) => {
    try {
      const {
        workingDirectory = process.cwd(),
        timeout = 30000,
        environmentVars = []
      } = options || {}

      // Prepare environment variables
      const env = { ...process.env }
      for (const envVar of environmentVars) {
        if (envVar.key && envVar.value) {
          env[envVar.key] = envVar.value
        }
      }

      const { stdout, stderr } = await execAsync(command, {
        cwd: workingDirectory,
        env,
        timeout
      })

      return {
        success: true,
        data: { stdout, stderr, command, workingDirectory }
      }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'nodes.file.save': async (path, content) => {
    try {
      await writeFile(path, content)
      return { success: true }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'nodes.file.open': async (path) => {
    try {
      const content = await readFile(path, 'utf-8')
      return { success: true, data: content }
    } catch (error) {
      return { success: false, error: error.message }
    }
  }
} 
===========================================
<handlers/storageHandlers.js>
===========================================
import database from '../services/database'
import { v4 as uuidv4 } from 'uuid'
import { randomUUID } from 'crypto'
import { Client } from 'pg'
import mysql from 'mysql2/promise'
import { open } from 'sqlite'
import sqlite3 from 'sqlite3'

export const storageHandlers = {
  'storage.save-flow': async (flowData) => {
    try {
      const id = flowData.id || uuidv4()
      await database.saveFlow({ ...flowData, id })
      return { success: true, data: { id } }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'storage.open-flow': async (flowId) => {
    try {
      const flow = await database.getFlow(flowId)
      if (!flow) {
        throw new Error('Flow not found')
      }
      return { success: true, data: flow }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'storage.save-env': async (envData) => {
    try {
      const id = envData.id || uuidv4()
      await database.saveEnv({ ...envData, id })
      return { success: true, data: { id } }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'storage.open-env': async (envId) => {
    try {
      const env = await database.getEnv(envId)
      if (!env) {
        throw new Error('Environment not found')
      }
      return { success: true, data: env }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'storage.list-env': async () => {
    try {
      const envs = await database.listEnv()
      return { success: true, data: envs }
    } catch (error) {
      return { success: false, error: error.message }
    }
  },

  'storage.test-connection': async (event, config) => {
    try {
      // Log the raw input
      console.log('Raw input in main process:', { event, config });
      
      // Log the actual config object
      console.log('Config in main process:', {
        type: config?.type,
        ...config,
        password: config?.password ? '[REDACTED]' : undefined
      });

      // Ensure config is properly structured
      const testConfig = typeof config === 'string' ? JSON.parse(config) : config;

      if (!testConfig?.type) {
        console.error('Missing database type:', testConfig);
        throw new Error(`Database type is required. Received: ${JSON.stringify(testConfig)}`);
      }

      switch (testConfig.type) {
        case 'sqlite': {
          if (!testConfig.file) {
            throw new Error('SQLite database file path is required');
          }

          console.log('Testing SQLite connection:', testConfig.file);
          const db = await open({
            filename: testConfig.file,
            driver: sqlite3.Database
          });
          
          await db.get('SELECT 1');
          await db.close();
          console.log('SQLite connection test successful');
          return { success: true };
        }

        case 'postgres': {
          const client = new Client({
            host: testConfig.host,
            port: parseInt(testConfig.port),
            database: testConfig.database,
            user: testConfig.username,
            password: testConfig.password,
            ssl: testConfig.ssl
          });
          
          await client.connect();
          await client.query('SELECT 1');
          await client.end();
          return { success: true };
        }

        case 'mysql': {
          const connection = await mysql.createConnection({
            host: testConfig.host,
            port: parseInt(testConfig.port),
            database: testConfig.database,
            user: testConfig.username,
            password: testConfig.password,
            ssl: testConfig.ssl
          });
          
          await connection.execute('SELECT 1');
          await connection.end();
          return { success: true };
        }

        default:
          throw new Error(`Unsupported database type: ${testConfig.type}`);
      }
    } catch (error) {
      console.error('Connection test failed in main process:', error);
      return { success: false, error: error.message };
    }
  },

  'storage.save-connection': async (event, connectionData) => {
    try {
      // Ensure we're getting the actual connection data
      const data = connectionData;
      
      console.log('Storage handler: received connection data:', {
        ...data,
        config: data?.config ? {
          ...data.config,
          password: data.config.password ? '[REDACTED]' : undefined
        } : undefined
      });

      // Validate the data
      if (!data || typeof data !== 'object') {
        throw new Error('Invalid connection data format');
      }

      if (!data.name || !data.type) {
        throw new Error('Connection name and type are required');
      }

      // For SQLite connections, validate file path
      if (data.type === 'sqlite' && !data.config?.file) {
        throw new Error('SQLite database file path is required');
      }

      // Save to database
      const result = await database.saveConnection(data);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to save connection');
      }

      return { success: true, data: result.id };
    } catch (error) {
      console.error('Failed to save connection:', error);
      return { success: false, error: error.message };
    }
  },

  'storage.list-connections': async () => {
    try {
      const connections = await database.listConnections();
      return { success: true, data: connections };
    } catch (error) {
      console.error('Failed to list connections:', error);
      return { success: false, error: error.message };
    }
  },

  'storage.delete-connection': async (event, id) => {
    try {
      await database.deleteConnection(id);
      return { success: true };
    } catch (error) {
      console.error('Failed to delete connection:', error);
      return { success: false, error: error.message };
    }
  }
} 
===========================================
<index.js>
===========================================
import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import icon from '../../resources/icon.png?asset'
import { exec } from 'child_process'
import { promisify } from 'util'
import { nodeHandlers } from './handlers/nodeHandlers'
import { storageHandlers } from './handlers/storageHandlers'
import { databaseHandlers } from './handlers/databaseHandlers'
import database from './services/database'
import { dialogHandlers } from './handlers/dialogHandlers'

const execAsync = promisify(exec)

function createWindow() {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    show: true,
    frame: true,
    // dev tools 
    devTools: true,
    autoHideMenuBar: false,
    ...(process.platform === 'linux' ? { icon } : {}),
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

function registerHandlers(ipcMain) {
  // Register handlers in specific order to ensure proper overrides
  const handlers = {
    ...nodeHandlers,
    ...storageHandlers,
    ...dialogHandlers,
    ...databaseHandlers  // Register database handlers last to take precedence
  }

  Object.entries(handlers).forEach(([channel, handler]) => {
    console.log(`Registering handler for channel: ${channel}`);
    ipcMain.handle(channel, handler);
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  // Initialize database first
  try {
    await database.initialize();
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Failed to initialize database:', error);
    app.quit();
    return;
  }

  // Register all handlers
  registerHandlers(ipcMain)

  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  // IPC test
  ipcMain.on('ping', () => console.log('pong'))

  // Add window control handlers
  ipcMain.on('minimize-window', () => {
    BrowserWindow.getFocusedWindow()?.minimize()
  })

  ipcMain.on('maximize-window', () => {
    const win = BrowserWindow.getFocusedWindow()
    if (win?.isMaximized()) {
      win.unmaximize()
    } else {
      win?.maximize()
    }
  })

  ipcMain.on('close-window', () => {
    BrowserWindow.getFocusedWindow()?.close()
  })

  createWindow()

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and require them here.

===========================================
<services/database.js>
===========================================
import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import { app } from 'electron'
import { join } from 'path'
import { mkdir } from 'fs/promises'
import { randomUUID } from 'crypto'
import path from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

class Database {
  constructor() {
    this.db = null;
  }

  async initialize() {
    try {
      const userDataPath = app.getPath('userData');
      const dbPath = path.join(userDataPath, 'flowdog.db');
      
      console.log('Initializing database at:', dbPath);

      this.db = await open({
        filename: dbPath,
        driver: sqlite3.Database
      });

      // Create tables if they don't exist
      await this.db.exec(`
        CREATE TABLE IF NOT EXISTS connections (
          id TEXT PRIMARY KEY,
          name TEXT NOT NULL,
          type TEXT NOT NULL,
          config TEXT NOT NULL
        );

        -- Add any other necessary tables here
      `);

      console.log('Database initialized successfully');
    } catch (error) {
      console.error('Failed to initialize database:', error);
      throw error;
    }
  }

  // Flow methods
  async saveFlow(flowData) {
    const { id, name, data } = flowData;
    return await this.db.run(
      `INSERT OR REPLACE INTO flows (id, name, data, updated_at) 
       VALUES (?, ?, ?, CURRENT_TIMESTAMP)`,
      [id, name, JSON.stringify(data)]
    );
  }

  async getFlow(id) {
    const flow = await this.db.get('SELECT * FROM flows WHERE id = ?', [id]);
    if (flow) {
      flow.data = JSON.parse(flow.data);
    }
    return flow;
  }

  // Environment methods
  async saveEnv(envData) {
    const { id, name, variables } = envData;
    return await this.db.run(
      `INSERT OR REPLACE INTO environments (id, name, variables, updated_at) 
       VALUES (?, ?, ?, CURRENT_TIMESTAMP)`,
      [id, name, JSON.stringify(variables)]
    );
  }

  async getEnv(id) {
    const env = await this.db.get('SELECT * FROM environments WHERE id = ?', [id]);
    if (env) {
      env.variables = JSON.parse(env.variables);
    }
    return env;
  }

  async listEnv() {
    const envs = await this.db.all('SELECT id, name, created_at, updated_at FROM environments');
    return envs;
  }

  async saveConnection(connection) {
    try {
      console.log('Database service: saving connection:', {
        id: connection.id,
        name: connection.name,
        type: connection.type,
        config: {
          ...connection.config,
          password: connection.config?.password ? '[REDACTED]' : undefined
        }
      });

      // Validate connection data
      if (!connection.name?.trim()) {
        throw new Error('Connection name is required');
      }
      if (!connection.type) {
        throw new Error('Connection type is required');
      }

      // Generate ID if not provided
      const id = connection.id || randomUUID();

      // For SQLite connections, ensure the file path is absolute
      const config = { ...connection.config };
      if (connection.type === 'sqlite' && config.file) {
        config.file = path.resolve(config.file);
      }

      // Store the config as a JSON string
      const configString = JSON.stringify(config);

      console.log('Executing database insert with:', {
        id,
        name: connection.name.trim(),
        type: connection.type,
        configLength: configString.length
      });

      await this.db.run(
        'INSERT INTO connections (id, name, type, config) VALUES (?, ?, ?, ?)',
        [id, connection.name.trim(), connection.type, configString]
      );

      console.log('Connection saved successfully with ID:', id);
      return { success: true, id };
    } catch (error) {
      console.error('Failed to save connection in database:', error);
      return { success: false, error: error.message };
    }
  }

  async updateConnection(connection) {
    try {
      // For SQLite connections, ensure the file path is absolute
      if (connection.type === 'sqlite' && connection.config.file) {
        connection.config.file = path.resolve(connection.config.file);
      }

      const configString = JSON.stringify(connection.config);

      await this.db.run(
        'UPDATE connections SET name = ?, type = ?, config = ? WHERE id = ?',
        [connection.name, connection.type, configString, connection.id]
      );

      return { success: true };
    } catch (error) {
      console.error('Failed to update connection:', error);
      return { success: false, error: error.message };
    }
  }

  async getConnection(id) {
    try {
      const row = await this.db.get('SELECT * FROM connections WHERE id = ?', [id]);
      if (!row) return null;

      return {
        id: row.id,
        name: row.name,
        type: row.type,
        config: JSON.parse(row.config)
      };
    } catch (error) {
      console.error('Failed to get connection:', error);
      throw error;
    }
  }

  async listConnections() {
    try {
      const rows = await this.db.all('SELECT * FROM connections');
      return rows.map(row => ({
        id: row.id,
        name: row.name,
        type: row.type,
        config: JSON.parse(row.config)
      }));
    } catch (error) {
      console.error('Failed to list connections:', error);
      throw error;
    }
  }

  async deleteConnection(id) {
    return await this.db.run('DELETE FROM connections WHERE id = ?', [id]);
  }
}

const database = new Database();
export default database; 
